# to build rsa unit tests compile with TESTS=y.
#
# - set u64 type definition by compiling with:
#   U64=UCHAR    for unsigned char (default)
#   U64=USHORT   for unsigned short
#   U64=ULONG    for unsigned long
#   U64=ULLONG   for unsigned long long
# 
# - to enable function timing feature compile with TIME_FUNCTIONS=y.
#
# to build signed rsa encoder and decoders compile with SIG='name'.
# a public key created by the rsa_enc application will contain a field with 
# 'name' signed by the private key and the private key created by the rsa_enc
# application will contain a field with 'name' encrypted by the public key.
# this is used to force rsa_enc and rsa_dec pairs to only use keys generated by
# by rsa-enc

RSA=rsa
ENC=enc
DEC=dec
TEST=test
ALL_TARGETS=$(RSA) $(RSA)_$(ENC) $(RSA)_$(DEC) $(TEST)_$(RSA)

ifeq ($(TESTS),y) #debug mode: create unit tests
TARGET=$(TEST)_$(RSA)
test_rsa: rsa_test.o rsa_num.o
	gcc -o $@ $^ -lm
else # creat rsa applications
ifeq ($(SIG),) # create master
TARGET=$(RSA)
else # create separate encoder/decoder
TARGET=$(RSA)_$(ENC) $(RSA)_$(DEC)
endif
endif

.PHONY: all clean cleanapps cleantags cleanall
all: $(TARGET)

CC=gcc
CFLAGS=-Wall -Werror
TARGET_OBJS=rsa_num.o

ifeq ($(TESTS),y) #debug mode
TARGET_OBJS+=rsa_test.o
CFLAGS+=-g -DTESTS

# enable/disable function timing
ifeq ($(TIME_FUNCTIONS),y)
CFLAGS+=-DTIME_FUNCTIONS
endif

# u64 type definition
ifeq ($(U64),UCHAR)
CFLAGS+=-DUCHAR
else
ifeq ($(U64),USHORT)
CFLAGS+=-DUSHORT
else
ifeq ($(U64),ULONG)
CFLAGS+=-DULONG
else
ifeq ($(U64),ULLONG)
CFLAGS+=-DULLONG
else
$(error please define U64= {UCHAR or USHORT or ULONG or ULLONG}) # error!
endif
endif
endif
endif
else #not debug
TAILOR_OBJS=main.o rsa_key.o rsa_io.o

ifeq ($(SIG),) #master encrypter/decrypter
%.o: %.c rsa.h
	$(CC) -o $@ $(CFLAGS) -c $<

$(RSA): $(TARGET_OBJS) $(TAILOR_OBJS)
	$(CC) -o $@ $^
else #separate encrypter and decrypter
CFLAGS+=-DSIG=\"$(SIG)\" # ENC/DEC

%_$(ENC).o: %.c rsa.h
	$(CC) -o $@ $(CFLAGS) -DRSA_ENC -c $<

%_$(DEC).o: %.c rsa.h
	$(CC) -o $@ $(CFLAGS) -DRSA_DEC -c $<

$(RSA)%: $(TARGET_OBJS) $(TAILOR_OBJS:.o=%.o)
	$(CC) -o $@ $^
endif
endif

clean:
	rm -rf *.o

cleanapps:
	rm -rf $(ALL_TARGETS)

cleantags:
	rm -rf tags

cleanall: clean cleanapps cleantags

